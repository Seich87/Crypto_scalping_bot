package com.example.scalpingBot.service.notification;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map;

/**
 * –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç–∞
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (Telegram, Email)
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 * - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
 * - Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
 *
 * –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É—é—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞
 * –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
 *
 * @author ScalpingBot Team
 * @version 1.0
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class NotificationService {

    private final TelegramNotifier telegramNotifier;

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Value("${notifications.telegram.enabled:true}")
    private boolean telegramEnabled;

    @Value("${notifications.email.enabled:false}")
    private boolean emailEnabled;

    /**
     * –ö–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private final Map<String, LocalDateTime> notificationCache = new ConcurrentHashMap<>();

    /**
     * –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private static final int CACHE_TTL_SECONDS = 300; // 5 –º–∏–Ω—É—Ç

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendTradeAlert(String title, String message) {
        sendNotification(NotificationType.TRADE, title, message, NotificationPriority.NORMAL);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendErrorAlert(String title, String message) {
        sendNotification(NotificationType.ERROR, title, message, NotificationPriority.HIGH);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendWarningAlert(String title, String message) {
        sendNotification(NotificationType.WARNING, title, message, NotificationPriority.NORMAL);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendInfoAlert(String title, String message) {
        sendNotification(NotificationType.INFO, title, message, NotificationPriority.LOW);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendSuccessAlert(String title, String message) {
        sendNotification(NotificationType.SUCCESS, title, message, NotificationPriority.NORMAL);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     *
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    public void sendCriticalAlert(String title, String message) {
        sendNotification(NotificationType.CRITICAL, title, message, NotificationPriority.CRITICAL);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     */
    private void sendNotification(NotificationType type, String title, String message, NotificationPriority priority) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            String cacheKey = generateCacheKey(type, title, message);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if (isDuplicate(cacheKey)) {
                log.debug("Skipping duplicate notification: {}", title);
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–µ—à
            notificationCache.put(cacheKey, LocalDateTime.now());

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            String formattedMessage = formatMessage(type, title, message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            CompletableFuture.runAsync(() -> {
                try {
                    sendToChannels(type, title, formattedMessage, priority);
                } catch (Exception e) {
                    log.error("Failed to send notification: {}", e.getMessage());
                }
            });

            log.debug("Notification queued: {} - {}", type, title);

        } catch (Exception e) {
            log.error("Error sending notification: {}", e.getMessage());
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–∞–Ω–∞–ª–∞–º
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     */
    private void sendToChannels(NotificationType type, String title, String message, NotificationPriority priority) {
        // Telegram
        if (telegramEnabled) {
            try {
                telegramNotifier.sendMessage(type, title, message, priority);
            } catch (Exception e) {
                log.error("Failed to send Telegram notification: {}", e.getMessage());
            }
        }

        // Email (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ)
        if (emailEnabled) {
            log.debug("Email notifications not implemented yet");
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private String formatMessage(NotificationType type, String title, String message) {
        StringBuilder formatted = new StringBuilder();

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        formatted.append(getEmojiForType(type)).append(" ");

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        formatted.append("*").append(title).append("*\n\n");

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted.append(message);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        formatted.append("\n\n_").append(LocalDateTime.now().toString()).append("_");

        return formatted.toString();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return —ç–º–æ–¥–∑–∏
     */
    private String getEmojiForType(NotificationType type) {
        switch (type) {
            case TRADE:
                return "üí∞";
            case SUCCESS:
                return "‚úÖ";
            case WARNING:
                return "‚ö†Ô∏è";
            case ERROR:
                return "‚ùå";
            case CRITICAL:
                return "üö®";
            case INFO:
            default:
                return "‚ÑπÔ∏è";
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
     *
     * @param type —Ç–∏–ø
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @return –∫–ª—é—á –∫–µ—à–∞
     */
    private String generateCacheKey(NotificationType type, String title, String message) {
        return String.format("%s:%s:%s", type, title, message.hashCode());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—É–±–ª–µ–º
     *
     * @param cacheKey –∫–ª—é—á –∫–µ—à–∞
     * @return true –µ—Å–ª–∏ –¥—É–±–ª—å
     */
    private boolean isDuplicate(String cacheKey) {
        LocalDateTime lastSent = notificationCache.get(cacheKey);
        if (lastSent == null) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        LocalDateTime now = LocalDateTime.now();
        long secondsSince = java.time.Duration.between(lastSent, now).getSeconds();

        if (secondsSince > CACHE_TTL_SECONDS) {
            notificationCache.remove(cacheKey);
            return false;
        }

        return true;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫–µ—à–∞
     */
    public void cleanupCache() {
        LocalDateTime cutoff = LocalDateTime.now().minusSeconds(CACHE_TTL_SECONDS);

        notificationCache.entrySet().removeIf(entry ->
                entry.getValue().isBefore(cutoff)
        );

        log.debug("Notification cache cleaned up. Size: {}", notificationCache.size());
    }

    /**
     * –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public enum NotificationType {
        TRADE,      // –¢–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        SUCCESS,    // –£—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        WARNING,    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        ERROR,      // –û—à–∏–±–∫–∏
        CRITICAL,   // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        INFO        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    /**
     * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    public enum NotificationPriority {
        LOW,        // –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        NORMAL,     // –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        HIGH,       // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        CRITICAL    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    }
}