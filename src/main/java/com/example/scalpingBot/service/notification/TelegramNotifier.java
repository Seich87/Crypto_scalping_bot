package com.example.scalpingBot.service.notification;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
 *
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —á–∞—Ç
 * - –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Markdown —Ä–∞–∑–º–µ—Ç–∫–æ–π
 * - Rate limiting –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API
 * - Retry –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ—è—Ö
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram Bot API –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏—è—Ö, –æ—à–∏–±–∫–∞—Ö –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.
 *
 * @author ScalpingBot Team
 * @version 1.0
 */
@Slf4j
@Component
public class TelegramNotifier {

    private final RestTemplate restTemplate;

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
     */
    @Value("${notifications.telegram.bot-token:}")
    private String botToken;

    @Value("${notifications.telegram.chat-id:}")
    private String chatId;

    @Value("${notifications.telegram.enabled:true}")
    private boolean enabled;

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    @Value("${notifications.telegram.alerts.trade-opened:true}")
    private boolean tradeOpenedEnabled;

    @Value("${notifications.telegram.alerts.trade-closed:true}")
    private boolean tradeClosedEnabled;

    @Value("${notifications.telegram.alerts.stop-loss-triggered:true}")
    private boolean stopLossEnabled;

    @Value("${notifications.telegram.alerts.daily-limit-reached:true}")
    private boolean dailyLimitEnabled;

    @Value("${notifications.telegram.alerts.emergency-stop:true}")
    private boolean emergencyStopEnabled;

    /**
     * Rate limiting
     */
    private final AtomicLong lastMessageTime = new AtomicLong(0);
    private static final long MIN_MESSAGE_INTERVAL_MS = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    private static final int MAX_MESSAGE_LENGTH = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram

    /**
     * API URL Telegram
     */
    private static final String TELEGRAM_API_URL = "https://api.telegram.org/bot%s/sendMessage";

    /**
     * –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
     */
    private static final DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern("HH:mm:ss");

    public TelegramNotifier() {
        this.restTemplate = new RestTemplate();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
        this.restTemplate.getRequestFactory();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     */
    public void sendMessage(NotificationService.NotificationType type, String title,
                            String message, NotificationService.NotificationPriority priority) {

        if (!isEnabled() || !shouldSendForType(type)) {
            log.debug("Telegram notification disabled for type: {}", type);
            return;
        }

        if (!isValidConfiguration()) {
            log.warn("Telegram configuration is invalid. Check bot-token and chat-id");
            return;
        }

        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º rate limiting
            if (!checkRateLimit()) {
                log.warn("Rate limit exceeded for Telegram notifications");
                return;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            String telegramMessage = formatTelegramMessage(type, title, message, priority);

            // –û–±—Ä–µ–∑–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if (telegramMessage.length() > MAX_MESSAGE_LENGTH) {
                telegramMessage = telegramMessage.substring(0, MAX_MESSAGE_LENGTH - 100) + "\n\n...(—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)";
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            sendToTelegram(telegramMessage);

            log.debug("Telegram notification sent: {} - {}", type, title);

        } catch (Exception e) {
            log.error("Failed to send Telegram notification: {}", e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     *
     * @return true –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã
     */
    private boolean isEnabled() {
        return enabled && botToken != null && !botToken.isEmpty() &&
                chatId != null && !chatId.isEmpty();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     *
     * @return true –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞
     */
    private boolean isValidConfiguration() {
        if (botToken == null || botToken.trim().isEmpty()) {
            return false;
        }

        if (chatId == null || chatId.trim().isEmpty()) {
            return false;
        }

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
        if (!botToken.matches("^[0-9]{8,10}:[a-zA-Z0-9_-]{35}$")) {
            log.warn("Bot token format seems invalid");
            return false;
        }

        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @return true –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
     */
    private boolean shouldSendForType(NotificationService.NotificationType type) {
        switch (type) {
            case TRADE:
                return tradeOpenedEnabled || tradeClosedEnabled;
            case CRITICAL:
                return emergencyStopEnabled;
            case WARNING:
                return dailyLimitEnabled;
            case ERROR:
                return stopLossEnabled;
            case SUCCESS:
            case INFO:
            default:
                return true;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å rate limit
     *
     * @return true –µ—Å–ª–∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
     */
    private boolean checkRateLimit() {
        long now = System.currentTimeMillis();
        long lastTime = lastMessageTime.get();

        if (now - lastTime < MIN_MESSAGE_INTERVAL_MS) {
            return false;
        }

        return lastMessageTime.compareAndSet(lastTime, now);
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param title –∑–∞–≥–æ–ª–æ–≤–æ–∫
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     * @return —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private String formatTelegramMessage(NotificationService.NotificationType type, String title,
                                         String message, NotificationService.NotificationPriority priority) {

        StringBuilder formatted = new StringBuilder();

        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        formatted.append(getEmojiForType(type, priority)).append(" ");
        formatted.append("*").append(escapeMarkdown(title)).append("*\n\n");

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted.append(escapeMarkdown(message));

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Ç–∏–ø
        formatted.append("\n\n");
        formatted.append("üïê ").append(LocalDateTime.now().format(TIME_FORMATTER));

        if (priority == NotificationService.NotificationPriority.CRITICAL) {
            formatted.append(" | ").append("üö® –ö–†–ò–¢–ò–ß–ù–û");
        }

        return formatted.toString();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     *
     * @param type —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
     * @return —ç–º–æ–¥–∑–∏
     */
    private String getEmojiForType(NotificationService.NotificationType type,
                                   NotificationService.NotificationPriority priority) {

        if (priority == NotificationService.NotificationPriority.CRITICAL) {
            return "üö®üö®üö®";
        }

        switch (type) {
            case TRADE:
                return "üí∞";
            case SUCCESS:
                return "‚úÖ";
            case WARNING:
                return "‚ö†Ô∏è";
            case ERROR:
                return "‚ùå";
            case CRITICAL:
                return "üö®";
            case INFO:
            default:
                return "‚ÑπÔ∏è";
        }
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
     *
     * @param text –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @return —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     */
    private String escapeMarkdown(String text) {
        if (text == null) {
            return "";
        }

        return text.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("(", "\\(")
                .replace(")", "\\)")
                .replace("~", "\\~")
                .replace("`", "\\`")
                .replace(">", "\\>")
                .replace("#", "\\#")
                .replace("+", "\\+")
                .replace("-", "\\-")
                .replace("=", "\\=")
                .replace("|", "\\|")
                .replace("{", "\\{")
                .replace("}", "\\}")
                .replace(".", "\\.")
                .replace("!", "\\!");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–µ—Ä–µ–∑ API
     *
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     */
    private void sendToTelegram(String message) {
        try {
            String url = String.format(TELEGRAM_API_URL, botToken);

            // –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("chat_id", chatId);
            requestBody.put("text", message);
            requestBody.put("parse_mode", "Markdown");
            requestBody.put("disable_web_page_preview", true);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            ResponseEntity<String> response = restTemplate.exchange(
                    url, HttpMethod.POST, entity, String.class
            );

            if (response.getStatusCode() == HttpStatus.OK) {
                log.debug("Telegram message sent successfully");
            } else {
                log.warn("Telegram API returned status: {}", response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("Error sending message to Telegram: {}", e.getMessage());

            // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
            if (e.getMessage().contains("parse_mode")) {
                sendSimpleMessage(message);
            }
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown (fallback)
     *
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void sendSimpleMessage(String message) {
        try {
            String url = String.format(TELEGRAM_API_URL, botToken);

            Map<String, Object> requestBody = new HashMap<>();
            requestBody.put("chat_id", chatId);
            requestBody.put("text", removeMarkdown(message));

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(requestBody, headers);

            restTemplate.exchange(url, HttpMethod.POST, entity, String.class);

            log.debug("Simple Telegram message sent as fallback");

        } catch (Exception e) {
            log.error("Failed to send simple Telegram message: {}", e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å Markdown —Ä–∞–∑–º–µ—Ç–∫—É
     *
     * @param text —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
     * @return —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
     */
    private String removeMarkdown(String text) {
        return text.replaceAll("[*_`\\[\\]()~>#+\\-=|{}.!]", "");
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     *
     * @return true –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
     */
    public boolean sendTestMessage() {
        if (!isValidConfiguration()) {
            log.error("Cannot send test message - invalid configuration");
            return false;
        }

        try {
            String testMessage = String.format(
                    "ü§ñ *–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π*\n\n" +
                            "–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n" +
                            "üïê %s",
                    LocalDateTime.now().format(TIME_FORMATTER)
            );

            sendToTelegram(testMessage);
            return true;

        } catch (Exception e) {
            log.error("Failed to send test message: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
     *
     * @return –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    public String getBotInfo() {
        if (!isValidConfiguration()) {
            return null;
        }

        try {
            String url = String.format("https://api.telegram.org/bot%s/getMe", botToken);

            ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);

            if (response.getStatusCode() == HttpStatus.OK) {
                return response.getBody();
            }

        } catch (Exception e) {
            log.error("Failed to get bot info: {}", e.getMessage());
        }

        return null;
    }
}