package com.example.scalpingBot.enums;

import lombok.Getter;
import java.math.BigDecimal;
import java.util.List;
import java.util.regex.Pattern;

/**
 * –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥-–±–æ—Ç–∞
 *
 * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –±–∞–∑–æ–≤—ã–º –∏ –∫–æ—Ç–∏—Ä—É–µ–º—ã–º –∞–∫—Ç–∏–≤–∞–º:
 * - CRYPTO_USDT - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ USDT (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞)
 * - CRYPTO_BTC - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Bitcoin
 * - CRYPTO_ETH - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Ethereum
 * - CRYPTO_BNB - –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Binance Coin
 * - FIAT_CRYPTO - —Ñ–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∫ –∫—Ä–∏–ø—Ç–µ
 * - STABLECOIN_PAIR - —Ç–æ—Ä–≥–æ–≤–ª—è –º–µ–∂–¥—É —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏
 *
 * @author ScalpingBot Team
 * @version 1.0
 */
@Getter
public enum TradingPairType {

    /**
     * –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ USDT - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –í—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     * - –ù–∏–∑–∫–∏–µ —Å–ø—Ä–µ–¥—ã
     * - –°—Ç–∞–±–∏–ª—å–Ω–∞—è –∫–æ—Ç–∏—Ä–æ–≤–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
     * - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ P&L
     * - –û–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
     *
     * –ü—Ä–∏–º–µ—Ä—ã: BTCUSDT, ETHUSDT, ADAUSDT
     */
    CRYPTO_USDT(
            "CRYPTO_USDT",
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ USDT",
            Pattern.compile("^[A-Z0-9]{2,10}USDT$"),
            "USDT",
            true,   // –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            true,   // –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.05"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.05%
            new BigDecimal("0.1"),  // –∫–æ–º–∏—Å—Å–∏—è 0.1%
            8,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            6,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("10.0"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $10
            new BigDecimal("1000000.0"), // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $1M
            "üí∞",   // —ç–º–æ–¥–∑–∏ –¥–æ–ª–ª–∞—Ä–∞
            "#00FF00", // –∑–µ–ª–µ–Ω—ã–π
            1       // –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ),

    /**
     * –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Bitcoin - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–∏–ø
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     * - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å Bitcoin –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ—Ç–∏—Ä–æ–≤–∫—É
     * - –¢—Ä–µ–±—É–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ P&L –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
     * - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
     *
     * –ü—Ä–∏–º–µ—Ä—ã: ETHBTC, ADABTC, LINKBTC
     */
    CRYPTO_BTC(
            "CRYPTO_BTC",
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Bitcoin",
            Pattern.compile("^[A-Z0-9]{2,10}BTC$"),
            "BTC",
            true,   // –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            false,  // –º–µ–Ω–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.1"),  // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.1%
            new BigDecimal("0.1"),  // –∫–æ–º–∏—Å—Å–∏—è 0.1%
            8,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            6,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("0.0001"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 0.0001 BTC
            new BigDecimal("100.0"),  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 100 BTC
            "‚Çø",    // —Å–∏–º–≤–æ–ª Bitcoin
            "#FF9500", // –æ—Ä–∞–Ω–∂–µ–≤—ã–π Bitcoin
            3       // —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ),

    /**
     * –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Ethereum
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –°—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     * - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—ã Ethereum
     * - –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –≤ DeFi —ç–∫–æ—Å–∏—Å—Ç–µ–º–µ
     * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∫–∞–ª—å–ø–∏–Ω–≥–µ
     *
     * –ü—Ä–∏–º–µ—Ä—ã: ADAETH, LINKETH, DOTETH
     */
    CRYPTO_ETH(
            "CRYPTO_ETH",
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Ethereum",
            Pattern.compile("^[A-Z0-9]{2,10}ETH$"),
            "ETH",
            false,  // —Å—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            false,  // –º–µ–Ω–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.15"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.15%
            new BigDecimal("0.1"),  // –∫–æ–º–∏—Å—Å–∏—è 0.1%
            8,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            6,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("0.001"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 0.001 ETH
            new BigDecimal("1000.0"), // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 1000 ETH
            "Œû",    // —Å–∏–º–≤–æ–ª Ethereum
            "#627EEA", // —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π Ethereum
            4       // –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ),

    /**
     * –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Binance Coin
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –°–∫–∏–¥–∫–∞ –Ω–∞ –∫–æ–º–∏—Å—Å–∏–∏ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ BNB
     * - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     * - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è Binance —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã
     * - –†–µ–¥–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å–∫–∞–ª—å–ø–∏–Ω–≥–µ
     *
     * –ü—Ä–∏–º–µ—Ä—ã: ETHBNB, ADABNB, DOTBNB
     */
    CRYPTO_BNB(
            "CRYPTO_BNB",
            "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∫ Binance Coin",
            Pattern.compile("^[A-Z0-9]{2,10}BNB$"),
            "BNB",
            false,  // —Å—Ä–µ–¥–Ω—è—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            false,  // –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.2"),  // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.2%
            new BigDecimal("0.075"), // –∫–æ–º–∏—Å—Å–∏—è 0.075% (—Å–∫–∏–¥–∫–∞ BNB)
            8,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            6,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("0.01"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 0.01 BNB
            new BigDecimal("10000.0"), // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º 10000 BNB
            "üî∏",   // —Ä–æ–º–±
            "#F3BA2F", // –∂–µ–ª—Ç—ã–π Binance
            5       // –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ),

    /**
     * –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –†–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
     * - –ù–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     * - –í—ã—Å–æ–∫–∏–µ —Å–ø—Ä–µ–¥—ã
     * - –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     * - –¢—Ä–µ–±—É–µ—Ç KYC/AML –ø—Ä–æ–≤–µ—Ä–∫–∏
     *
     * –ü—Ä–∏–º–µ—Ä—ã: BTCEUR, ETHGBP, BTCRUB
     */
    FIAT_CRYPTO(
            "FIAT_CRYPTO",
            "–§–∏–∞—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ",
            Pattern.compile("^[A-Z0-9]{2,10}(EUR|USD|GBP|RUB|JPY)$"),
            "FIAT",
            false,  // –Ω–∏–∑–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            false,  // –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.5"),  // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.5%
            new BigDecimal("0.1"),  // –∫–æ–º–∏—Å—Å–∏—è 0.1%
            2,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (—Ñ–∏–∞—Ç)
            6,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("10.0"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $10
            new BigDecimal("100000.0"), // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $100K
            "üíµ",   // –¥–æ–ª–ª–∞—Ä
            "#85BB65", // –∑–µ–ª–µ–Ω—ã–π –¥–æ–ª–ª–∞—Ä
            6       // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    ),

    /**
     * –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –º–µ–∂–¥—É —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω–∞–º–∏
     *
     * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
     * - –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
     * - –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
     * - –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è
     * - –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     * - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
     *
     * –ü—Ä–∏–º–µ—Ä—ã: USDCUSDT, BUSDUSDT, DAIUSDT
     */
    STABLECOIN_PAIR(
            "STABLECOIN_PAIR",
            "–°—Ç–µ–π–±–ª–∫–æ–∏–Ω –∫ —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—É",
            Pattern.compile("^(USDC|BUSD|DAI|TUSD|PAX)(USDT|USDC|BUSD)$"),
            "STABLE",
            true,   // –≤—ã—Å–æ–∫–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
            false,  // –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
            new BigDecimal("0.01"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ 0.01%
            new BigDecimal("0.1"),  // –∫–æ–º–∏—Å—Å–∏—è 0.1%
            4,      // —Ç–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã
            2,      // —Ç–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            new BigDecimal("100.0"), // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $100
            new BigDecimal("10000000.0"), // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $10M
            "üîÑ",   // —Å—Ç—Ä–µ–ª–∫–∏
            "#808080", // —Å–µ—Ä—ã–π
            2       // —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
    );

    /**
     * –ö–æ–¥ —Ç–∏–ø–∞ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    private final String code;

    /**
     * –ß–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
     */
    private final String description;

    /**
     * –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–∞—Ä—ã
     */
    private final Pattern pattern;

    /**
     * –ö–æ—Ç–∏—Ä—É–µ–º–∞—è –≤–∞–ª—é—Ç–∞
     */
    private final String quoteCurrency;

    /**
     * –í—ã—Å–æ–∫–∞—è –ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
     */
    private final boolean highLiquidity;

    /**
     * –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     */
    private final boolean suitableForScalping;

    /**
     * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–∂–∏–¥–∞–µ–º—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    private final BigDecimal minSpreadPercent;

    /**
     * –¢–∏–ø–∏—á–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    private final BigDecimal tradingFeePercent;

    /**
     * –¢–æ—á–Ω–æ—Å—Ç—å —Ü–µ–Ω—ã (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
     */
    private final int pricePrecision;

    /**
     * –¢–æ—á–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
     */
    private final int quantityPrecision;

    /**
     * –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏
     */
    private final BigDecimal minTradeVolume;

    /**
     * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏
     */
    private final BigDecimal maxTradeVolume;

    /**
     * –≠–º–æ–¥–∑–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     */
    private final String emoji;

    /**
     * –¶–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥
     */
    private final String colorCode;

    /**
     * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ (—á–µ–º –º–µ–Ω—å—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
     */
    private final int scalpingPriority;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è
     */
    TradingPairType(String code, String description, Pattern pattern, String quoteCurrency,
                    boolean highLiquidity, boolean suitableForScalping,
                    BigDecimal minSpreadPercent, BigDecimal tradingFeePercent,
                    int pricePrecision, int quantityPrecision,
                    BigDecimal minTradeVolume, BigDecimal maxTradeVolume,
                    String emoji, String colorCode, int scalpingPriority) {
        this.code = code;
        this.description = description;
        this.pattern = pattern;
        this.quoteCurrency = quoteCurrency;
        this.highLiquidity = highLiquidity;
        this.suitableForScalping = suitableForScalping;
        this.minSpreadPercent = minSpreadPercent;
        this.tradingFeePercent = tradingFeePercent;
        this.pricePrecision = pricePrecision;
        this.quantityPrecision = quantityPrecision;
        this.minTradeVolume = minTradeVolume;
        this.maxTradeVolume = maxTradeVolume;
        this.emoji = emoji;
        this.colorCode = colorCode;
        this.scalpingPriority = scalpingPriority;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
     *
     * @param pairName –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     * @return —Ç–∏–ø —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     */
    public static TradingPairType fromPairName(String pairName) {
        if (pairName == null || pairName.trim().isEmpty()) {
            throw new IllegalArgumentException("Trading pair name cannot be null or empty");
        }

        String normalizedName = pairName.trim().toUpperCase();

        for (TradingPairType type : values()) {
            if (type.pattern.matcher(normalizedName).matches()) {
                return type;
            }
        }

        throw new IllegalArgumentException("Unknown trading pair type for: " + pairName);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–∏–ø—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     *
     * @return —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     */
    public static List<TradingPairType> getScalpingSuitableTypes() {
        return List.of(CRYPTO_USDT, STABLECOIN_PAIR);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
     *
     * @return —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø–∞—Ä
     */
    public static List<String> getRecommendedScalpingPairs() {
        return List.of(
                "BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT",
                "LINKUSDT", "BNBUSDT", "SOLUSDT", "AVAXUSDT",
                "MATICUSDT", "ATOMUSDT", "LTCUSDT", "XRPUSDT"
        );
    }

    /**
     * –ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä—ã
     *
     * @param pairName –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     * @return –±–∞–∑–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
     */
    public String getBaseCurrency(String pairName) {
        if (pairName == null || !pattern.matcher(pairName.toUpperCase()).matches()) {
            throw new IllegalArgumentException("Invalid pair name for this type: " + pairName);
        }

        String normalizedName = pairName.toUpperCase();
        return normalizedName.replace(quoteCurrency, "");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞
     *
     * @param riskLevel —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
     * @return true –µ—Å–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ
     */
    public boolean isCompatibleWithRiskLevel(RiskLevel riskLevel) {
        switch (riskLevel) {
            case VERY_LOW:
            case LOW:
                return this == CRYPTO_USDT && highLiquidity;
            case MEDIUM:
                return suitableForScalping;
            case HIGH:
            case VERY_HIGH:
                return highLiquidity; // –ª—é–±–æ–π —Å –≤—ã—Å–æ–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å—é
            case CRITICAL:
                return false; // –Ω–∏–∫–∞–∫–æ–π —Ç–∏–ø –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
            default:
                return false;
        }
    }

    /**
     * –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–π
     *
     * @return –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    public BigDecimal getMinProfitToCoverFees() {
        // –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥ + –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã—Ö–æ–¥ + –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
        return tradingFeePercent.multiply(new BigDecimal("2")).add(new BigDecimal("0.1"));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∞—Ä—ã
     *
     * @param positionSize —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
     * @return true –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç
     */
    public boolean isValidPositionSize(BigDecimal positionSize) {
        return positionSize.compareTo(minTradeVolume) >= 0 &&
                positionSize.compareTo(maxTradeVolume) <= 0;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∞—Ä—ã
     *
     * @return –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    public int getRecommendedAnalysisInterval() {
        if (suitableForScalping && highLiquidity) {
            return 15; // –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞
        } else if (highLiquidity) {
            return 30; // —Å—Ä–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        } else {
            return 60; // –º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∏–∑–∫–æ–ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
     *
     * @return –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
     */
    public BigDecimal getMaxRecommendedSpread() {
        return minSpreadPercent.multiply(new BigDecimal("3")); // –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤
     *
     * @return —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
     */
    public String toLogString() {
        return String.format("%s %s", emoji, description);
    }

    @Override
    public String toString() {
        return description;
    }
}